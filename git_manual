# Закомство с GIT 
Git — это набор консольных утилит, которые отслеживают и фиксируют изменения в файлах 

## Установка
* Linux — нужно просто открыть терминал и установить приложение при помощи пакетного менеджера вашего дистрибутива. Для Ubuntu команда будет выглядеть следующим образом:
`sudo apt-get install git`

* Windows — используйте git for windows, так как он содержит и клиент с графическим интерфейсом, и эмулятор bash.

* OS X — проще всего воспользоваться homebrew. После его установки запустите в терминале:
`brew install git`

## Настройка
Откройте терминал и запустите команды:

`git config --global user.name "My Name"`

`git config --global user.email myEmail@example.com`

Для того, чтобы посмотреть все настройки системы, используйте команду:

`git config --list`

## Создание нового репозитория

Чтобы создать новый репозиторий, нам нужно открыть терминал, зайти в папку нашего проекта и выполнить команду `git init`. 
Это включит приложение в этой конкретной папке и создаст скрытую директорию .git, где будет храниться история репозитория и настройки.
Создайте на рабочем столе папку под названием git_exercise. Для этого в окне терминала введите:

`mkdir Desktop/git_exercise/`

`cd Desktop/git_exercise/`

`git init`

Командная строка должна вернуть что-то вроде:

`Initialized empty Git repository in /home/user/Desktop/git_exercise/.git/`

## Определение состояния

status — это еще одна важнейшая команда, которая показывает информацию о текущем состоянии репозитория: актуальна ли информация на нём, нет ли чего-то нового, что поменялось, и так далее. Запуск git status на нашем свежесозданном репозитории должен выдать:

`git status`

`On branch master`

`Initial commit`

`Untracked files:`

`(use "git add ..." to include in what will be committed)`

`hello.txt`

Сообщение говорит о том, что файл hello.txt неотслеживаемый. Это значит, что файл новый и система еще не знает, нужно ли следить за изменениями в файле или его можно просто игнорировать. Для того, чтобы начать отслеживать новый файл, нужно его специальным образом объявить.

## Подготовка файлов

В git есть концепция области подготовленных файлов. Можно представить ее как холст, на который наносят изменения, которые нужны в коммите. Сперва он пустой, но затем мы добавляем на него файлы (или части файлов, или даже одиночные строчки) командой add и, наконец, коммитим все нужное в репозиторий (создаем слепок нужного нам состояния) командой commit.
В нашем случае у нас только один файл, так что добавим его:

`git add hello.txt`

Если нам нужно добавить все, что находится в директории, мы можем использовать:

`git add -A`

Проверим статус снова, на этот раз мы должны получить другой ответ:

`git status`

`On branch master`

`Initial commit`

`Changes to be committed:`

`(use "git rm --cached ..." to unstage)`

`new file: hello.txt`

Файл готов к коммиту. Сообщение о состоянии также говорит нам о том, какие изменения относительно файла были проведены в области подготовки — в данном случае это новый файл, но файлы могут быть модифицированы или удалены.

## Как сделать коммит

Для сохранения изменений, их необходимо закоммитить. Но сначала, мы должны обозначить эти файлы для Гита, при помощи команды git add, добавляющей (или подготавливающей) их к коммиту. Добавлять их можно по отдельности:

`git add название файла`

Или пачкой:

`git add .` 

Удалить можно командой:

`git reset:`

Теперь создадим непосредственно сам коммит:

`git commit -m 'Add some code'`

Флажок -m задаст commit message - комментарий разработчика. Он необходим для описания закоммиченных изменений. И здесь работает золотое правило всех комментариев в коде: «Максимально ясно, просто и содержательно обозначь написанное!»

## Как посмотреть коммиты

Для просмотра все выполненных фиксаций можно воспользоваться историей коммитов. Она содержит сведения о каждом проведенном коммите проекта. Запросить ее можно при помощи команды:

`git log`

В ней содержиться вся информация о каждом отдельном коммите, с указанием его хэша, автора, списка изменений и даты, когда они были сделаны. Отследить интересующие вас операции в списке изменений, можно по хэшу коммита, при помощи команды git show :

`git show hash_commit`

Ну а если вдруг нам нужно переделать commit message и внести туда новый комментарий, можно написать следующую конструкцию:

`git commit --amend -m 'Новый комментарий'`

В данном случае сообщение последнего коммита перезапишется. Но злоупотреблять этим не стоит, поскольку эта операция опасная и лучше ее делать до отправки коммита на сервер.

### Отслеживание изменений, сделанных в коммитах

У каждого коммита есть свой уникальный идентификатор в виде строки цифр и букв. Чтобы просмотреть список всех коммитов и их идентификаторов, можно использовать команду:

`git log`

![пример вывода](\GIT_Homework\1.png)


Как вы можете заметить, идентификаторы довольно длинные, но для работы с ними не обязательно копировать их целиком — первых нескольких символов будет вполне достаточно. Чтобы посмотреть, что нового появилось в коммите, мы можем воспользоваться командой show [commit]

![пример вывода](\GIT_Homework\2.png)

Чтобы увидеть разницу между двумя коммитами, используется команда diff (с указанием промежутка между коммитами):

![пример вывода](\GIT_Homework\3.png)


Мы сравнили первый коммит с последним, чтобы увидеть все изменения, которые были когда-либо сделаны. Обычно проще использовать git difftool, так как эта команда запускает графический клиент, в котором наглядно сопоставляет все изменения.